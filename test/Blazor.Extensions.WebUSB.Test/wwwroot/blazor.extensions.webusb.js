!function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(r,i,function(t){return e[t]}.bind(null,i));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(1);var i;!function(e){const t="BlazorExtensions",n={WebUSB:new r.USBManager};e.initialize=function(){"undefined"==typeof window||window[t]?window[t]=Object.assign(Object.assign({},window[t]),n):window[t]=Object.assign({},n)}}(i||(i={})),i.initialize()},function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))(function(i,o){function s(e){try{a(r.next(e))}catch(e){o(e)}}function c(e){try{a(r.throw(e))}catch(e){o(e)}}function a(e){e.done?i(e.value):function(e){return e instanceof n?e:new n(function(t){t(e)})}(e.value).then(s,c)}a((r=r.apply(e,t||[])).next())})};Object.defineProperty(t,"__esModule",{value:!0});const i=n(2);t.USBManager=class{constructor(){this.usb=navigator.usb,this._usbReference=void 0,this._foundDevices=[],this._eventsRegistered=!1,this.GetDevices=(()=>r(this,void 0,void 0,function*(){let e=yield this.usb.getDevices(),t=[];return e&&e.forEach(e=>{t.push(i.ParseUSBDevice(e)),this._foundDevices.push(e)}),t})),this.RequestDevice=(e=>r(this,void 0,void 0,function*(){let t=[],n=void 0;e&&null!=e&&e.filters&&null!=e.filters&&e.filters.length>0?(e.filters.forEach(e=>{let n={};Object.keys(e).forEach(t=>{null!=e[t]&&(n[t]=e[t])}),function(e){for(var t in e)if(Object.prototype.hasOwnProperty.call(e,t))return!1;return!0}(n)||t.push(n)}),t.length>0&&(n={filters:t})):n={filters:[]};let r=yield this.usb.requestDevice(n),o=i.ParseUSBDevice(r);return this._foundDevices.push(r),o})),this.OpenDevice=(e=>{let t=this.GetUSBDevice(e);return new Promise((e,n)=>{if(!t)return n("Device not connected");t.open().then(()=>{let n=i.ParseUSBDevice(t);console.log(n),e(n)}).catch(e=>n(e))})}),this.CloseDevice=(e=>{let t=this.GetUSBDevice(e);return new Promise((e,n)=>{if(!t)return n("Device not connected");t.close().then(()=>{e(i.ParseUSBDevice(t))}).catch(e=>n(e))})}),this.ResetDevice=(e=>{let t=this.GetUSBDevice(e);return new Promise((e,n)=>{if(!t)return n("Device not connected");t.reset().then(()=>{e(i.ParseUSBDevice(t))}).catch(e=>n(e))})}),this.SelectConfiguration=((e,t)=>{let n=this.GetUSBDevice(e);return new Promise((e,r)=>{if(!n)return r("Device not connected");console.log(t),n.selectConfiguration(t).then(()=>{e(i.ParseUSBDevice(n))}).catch(e=>r(e))})}),this.ClaimInterface=((e,t)=>{let n=this.GetUSBDevice(e);return new Promise((e,r)=>{if(!n)return r("Device not connected");n.claimInterface(t).then(()=>{e(i.ParseUSBDevice(n))}).catch(e=>r(e))})}),this.ReleaseInterface=((e,t)=>{let n=this.GetUSBDevice(e);return new Promise((e,r)=>{if(!n)return r("Device not connected");n.releaseInterface(t).then(()=>{e(i.ParseUSBDevice(n))}).catch(e=>r(e))})}),this.SelectAlternateInterface=((e,t,n)=>{let r=this.GetUSBDevice(e);return new Promise((e,o)=>{if(!r)return o("Device not connected");r.selectAlternateInterface(t,n).then(()=>{e(i.ParseUSBDevice(r))}).catch(e=>o(e))})}),this.ClearHalt=((e,t,n)=>{let r=this.GetUSBDevice(e);return new Promise((e,o)=>{if(!r)return o("Device not connected");r.clearHalt(t,n).then(()=>{e(i.ParseUSBDevice(r))}).catch(e=>o(e))})}),this.TransferIn=((e,t,n)=>{let r=this.GetUSBDevice(e);return new Promise((e,i)=>{if(!r)return i("Device not connected");r.transferIn(t,n).then(t=>{e({data:this.BufferToBase64(Array.prototype.slice.call(new Uint8Array(t.data.buffer))),status:t.status})}).catch(e=>{console.error(e),i(e)})})}),this.TransferOut=((e,t,n)=>{let r=this.GetUSBDevice(e);return new Promise((e,i)=>{if(!r)return i("Device not connected");const o=this.Base64ToBuffer(n);r.transferOut(t,o).then(t=>{e({bytesWritten:t.bytesWritten,status:t.status})}).catch(e=>{console.error(e),i(e)})})}),this.ControlTransferIn=((e,t,n)=>{let r=this.GetUSBDevice(e);return new Promise((e,i)=>{if(!r)return i("Device not connected");r.ControlTransferIn(t,n).then(t=>{e({data:this.BufferToBase64(Array.prototype.slice.call(new Uint8Array(t.data.buffer))),status:t.status})}).catch(e=>{console.error(e),i(e)})})}),this.ControlTransferOut=((e,t,n)=>{let r=this.GetUSBDevice(e);return new Promise((e,i)=>{if(!r)return i("Device not connected");const o=this.Base64ToBuffer(n);r.controlTransferOut(t,o).then(t=>{console.log(t),e({bytesWritten:t.bytesWritten,status:t.status})}).catch(e=>{console.error(e),i(e)})})}),this.GetUSBDevice=(e=>this._foundDevices.find(t=>t.vendorId==e.vendorId&&t.productId==e.productId&&t.deviceClass==e.deviceClass&&t.serialNumber==e.serialNumber)),this.ConnectionStateChangedCallback=(e=>{if(!this._usbReference)return;let t="",n=this.GetUSBDevice(e.device);if("disconnect"==e.type)t="OnDisconnect",this._foundDevices=this._foundDevices.filter((e,t,r)=>e.vendorId!=n.vendorId&&e.productId!=n.productId&&e.deviceClass!=n.deviceClass&&e.serialNumber!=n.serialNumber);else{if("connect"!=e.type)return void console.warn(e);t="OnConnect"}this._usbReference.invokeMethodAsync(t,i.ParseUSBDevice(e.device))}),this.RegisterUSBEvents=(e=>{this._usbReference=e,this._eventsRegistered||(this.usb.addEventListener("connect",this.ConnectionStateChangedCallback),this.usb.addEventListener("disconnect",this.ConnectionStateChangedCallback),this._eventsRegistered=!0)}),this.RemoveUSBEvents=(e=>{this._eventsRegistered&&(this.usb.removeEventListener("connect",this.ConnectionStateChangedCallback),this.usb.removeEventListener("disconnect",this.ConnectionStateChangedCallback))}),this.BufferToBase64=(e=>{var t=Array.prototype.map.call(e,e=>String.fromCharCode(e)).join("");return btoa(t)}),this.Base64ToBuffer=(e=>{var t=atob(e),n=new Uint8Array(t.length);return Array.prototype.forEach.call(t,(e,t)=>{n[t]=e.charCodeAt(0)}),n})}}},function(e,t,n){"use strict";function r(e){return{configurationValue:e.configurationValue,configurationName:e.configurationName,interfaces:e.interfaces.map(e=>(function(e){return{interfaceNumber:e.interfaceNumber,alternate:e.alternate?i(e.alternate):null,alternates:e.alternates.map(e=>i(e)),claimed:e.claimed}})(e))}}function i(e){return{alternateSetting:e.alternateSetting,interfaceClass:e.interfaceClass,interfaceSubclass:e.interfaceSubclass,interfaceProtocol:e.interfaceProtocol,interfaceName:e.interfaceName,endpoints:e.endpoints.map(e=>(function(e){return{endpointNumber:e.endpointNumber,direction:e.direction,type:e.type,packetSize:e.packetSize}})(e))}}Object.defineProperty(t,"__esModule",{value:!0}),function(e){e[e.in=0]="in",e[e.out=1]="out"}(t.USBDirection||(t.USBDirection={})),function(e){e[e.bulk=0]="bulk",e[e.interrupt=1]="interrupt",e[e.isochronous=2]="isochronous"}(t.USBEndpointType||(t.USBEndpointType={})),function(e){e[e.ok=0]="ok",e[e.stall=1]="stall",e[e.babble=2]="babble"}(t.USBTransferStatus||(t.USBTransferStatus={})),function(e){e[e.standard=0]="standard",e[e.class=1]="class",e[e.vendor=2]="vendor"}(t.USBRequestType||(t.USBRequestType={})),function(e){e[e.device=0]="device",e[e.interface=1]="interface",e[e.endpoint=2]="endpoint",e[e.other=3]="other"}(t.USBRecipient||(t.USBRecipient={})),t.ParseUSBDevice=function(e){return{usbVersionMajor:e.usbVersionMajor,usbVersionMinor:e.usbVersionMinor,usbVersionSubminor:e.usbVersionSubminor,deviceClass:e.deviceClass,deviceSubclass:e.deviceSubclass,deviceProtocol:e.deviceProtocol,vendorId:e.vendorId,productId:e.productId,deviceVersionMajor:e.deviceVersionMajor,deviceVersionMinor:e.deviceVersionMinor,deviceVersionSubminor:e.deviceVersionSubminor,manufacturerName:e.manufacturerName,productName:e.productName,serialNumber:e.serialNumber,configuration:null!=e.configuration?r(e.configuration):null,configurations:e.configurations.map(e=>r(e)),opened:e.opened}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,